podTemplate(
  label: 'parent',
  containers:
  [
    containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.12', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
  ],
  volumes: [hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')],
  serviceAccount: 'diamanti-jenkins-sa',
  namespace: 'jenkins')
{
  node ('parent')
  {
    try
    {
      stage('Clone repository')
      {
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm
      }
      stage('Show everything is ready')
      {
        container('kubectl')
        {
          sh 'kubectl get pods -o wide'
        }
      }
      stage('Populating the Database')
      {
        container('kubectl')
        {
          sh 'kubectl exec -it redis-enterprise-2 -- /opt/redislabs/bin/memtier_benchmark -s ${redis_host} -p ${redis_port} --hide-histogram --key-maximum=75000000 -n allkeys -d 500 --key-pattern=P:P --ratio=1:0'
        }
      }
      stage('Priming the Database')
      {
        container('kubectl')
        {
          sh 'kubectl exec -it redis-enterprise-2 -- /opt/redislabs/bin/memtier_benchmark -s ${redis_host} -p ${redis_port} --hide-histogram --key-minimum=27250000 --key-maximum=47750000 -n allkeys --key-pattern=P:P --ratio=0:1'
        }
      }
      stage('Running the Benchmarking')
      {
        container('kubectl')
        {
          sh 'kubectl exec -it redis-enterprise-2 -- /opt/redislabs/bin/memtier_benchmark -s ${redis_host} -p ${redis_port} --pipeline=11 -c 20 -t 1 -d 500 --key-maximum=75000000 --key-pattern=G:G --key-stddev=5125000 --ratio=1:1 --distinct-client-seed --randomize --test-time=600 --run-count=1 --out-file=test.out'
        }
      }
    }
    finally
    {
      stage('Clean Up Redis')
      {
        container('kubectl')
        {
          sh 'cd redis; kubectl delete -f redis.yaml'
        }
      }
      stage('Show that we cleaned up')
      {
        container('kubectl')
        {
          sh 'kubectl get pods -o wide'
        }
      }
    }
  }
}
